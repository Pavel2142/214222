import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient, events, types
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api_id = '22101462'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
api_hash = 'cc6369b9c1916ebaaeb7ab76b0a76ce5'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash
log_channel_id = -1002269320153  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
users_to_track = ['Jennie1075', 'lilyhusbenddd', 'wdhxk']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
client = TelegramClient('session_name', api_id, api_hash)

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_status = {username: False for username in users_to_track}
user_start_times = {username: None for username in users_to_track}
start_time = None  # –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–≥–æ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ (10 —Å–µ–∫—É–Ω–¥)
min_shared_online_duration = timedelta(seconds=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∞–∫—Ü–∏–∏
async def send_log_to_channel(message):
    try:
        sent_message = await client.send_message(log_channel_id, message)
        await add_reaction(sent_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫–ª–æ—É–Ω–∞
async def add_reaction(message):
    try:
        reaction = ReactionEmoji(emoticon='ü§°')
        await client(SendReactionRequest(
            peer=message.peer_id,
            msg_id=message.id,
            reaction=[reaction]
        ))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_online_status():
    global start_time
    delay = 10  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    while True:
        status_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in users_to_track:
            try:
                user = await client.get_entity(username)
                online_now = isinstance(user.status, types.UserStatusOnline)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if online_now and not user_status[username]:
                    user_start_times[username] = datetime.now()
                    log_message = f"{username} —Å—Ç–∞–ª –æ–Ω–ª–∞–π–Ω\n–í—Ä–µ–º—è: {user_start_times[username].strftime('%H:%M:%S')} ü§° #{username}"
                    await send_log_to_channel(log_message)

                elif not online_now and user_status[username]:
                    end_time = datetime.now()
                    duration = end_time - user_start_times[username]
                    log_message = f"{username} –±—ã–ª –æ–Ω–ª–∞–π–Ω —Å {user_start_times[username].strftime('%H:%M:%S')} –¥–æ {end_time.strftime('%H:%M:%S')}\n" \
                                  f"–í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {str(duration).split('.')[0]} ü§° #{username}"
                    await send_log_to_channel(log_message)
                    user_start_times[username] = None

                user_status[username] = online_now
                status = "–û–Ω–ª–∞–π–Ω" if online_now else "–û—Ñ—Ñ–ª–∞–π–Ω"
                status_list.append(f"{username}: {status}")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ {username}: {e}")

        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"\033[92m–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {current_time} ({', '.join(status_list)})\033[0m")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–±—â–∏–π –æ–Ω–ª–∞–π–Ω
        if all(user_status.values()):
            if start_time is None:
                start_time = datetime.now()
                log_message = f"–û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω —Å {start_time.strftime('%H:%M:%S')}\nü§° #–ü–æ–Ω"
                await send_log_to_channel(log_message)

        elif any(user_status.values()) and start_time is not None:
            end_time = datetime.now()
            shared_online_duration = end_time - start_time
            # –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
            if shared_online_duration >= min_shared_online_duration:
                log_message = f"–û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω —Å {start_time.strftime('%H:%M:%S')} –¥–æ {end_time.strftime('%H:%M:%S')}\n" \
                              f"–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {str(shared_online_duration).split('.')[0]} ü§° #–ü–æ–Ω"
                await send_log_to_channel(log_message)
            start_time = None

        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–Ω–ª–∞–π–Ω
        delay = 2 if any(user_status.values()) else 10
        await asyncio.sleep(delay)

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def main():
    await client.start()  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ
    await check_online_status()

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
loop = asyncio.get_event_loop()
loop.run_until_complete(main())
